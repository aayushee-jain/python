                    ###################################################
                    ####        Game of Rocks                      ####
                    ####        By Aayushee Jain                   ####
                    ####        Compiled on Python 2.7             #### 
                    ###################################################

## This is a 2 players game with two piles of rocks. At each turn a player can choose a pile and remove 1 or 2 rocks from that pile.
## the player to remove the last rock, such that there are 0 rocks on both piles, wins. 
## a function that constructs the winner matrix for the number of rocks on the
## piles i and j respectively.

def game_of_rocks(i , j):
    winner = []                     ## intialize the list that will hold the matrix
    for m in range(i+1):            ## create a list of lists. Each row gives the list of 
            temp = []               ## winning strategies for m number of rocks in pile 1
            for n in range(j+1):    ## where m in from 0 to i and n number of rocks in pile 2  
                    temp.append(1)  ## where n is from 0 to j. each element is assigned 1.
            winner.append(temp)
## If both i and j are 1 the second player would win. For all i>1 and j>1 we will compute the
## winner matrix. 
    if i>1 and j>1:                 
        winner[0][1] = 1     ## base cases 0,1 1,0 0,2 and 2,0 are all set to 1
        winner[0][2] = 1
        winner[1][0] = 1
        winner[2][0] = 1
## all other cases up to i,j are computed based on the conditions below
        for m in range(i+1):
                for n in range(j+1):
## when m or n is 1 we look for (m-1, n) and (m, n-1) winners to figure out the winner
                        if m==1 or n==1:
                                if winner[m-1][n] == 1 and winner[m][n-1] == 1:
                                        winner[m][n] = 2
## when n is 0 n-1 and n-2 does not exist. we only consider m-1 and m-2
                        elif n==0:
                                if winner[m-1][n] == 1 and winner[m-2][n] == 1:
                                        winner[m][n] = 2
## when m is 0 m-1 and m-2 does not exist. we only consider n-1 and n-2
                        elif m==0:
                                if winner[m][n-1] == 1 and winner[m][n-2] == 1:
                                        winner[m][n] = 2
## in all other conditions we consider all four situations (m-1,n), (m-2, n), (m,n-1) and (m,n-2)                        
                        else:
                                if winner[m-1][n] == 1 and winner[m-2][n] == 1 and winner[m][n-1] == 1 and winner[m][n-2] == 1:
                                        winner[m][n] = 2
    elif i ==1 and j==1:
        winner[i][j]= 2
    return(winner [i][j])
## teh main function calls for the number of rocks in both piles i and j respectively
## and then calls the game_of_rocks function to find the winner
def main():
    i = input("the number of rocks in first pile = ")
    j = input("the number of rocks in second pile = ")
    winner = game_of_rocks(i,j)
    print str(winner) + " has the winning strategy."

if __name__ == '__main__':
    main()
